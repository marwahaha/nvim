if &compatible
  set nocompatible
endif 

set runtimepath+=~/.config/nvim/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.config/nvim/dein')
  call dein#begin('~/.config/nvim/dein')
  " Add or remove you plugins here: " 
  call dein#add('~/.config/nvim/dein/repos/github.com/Shougo/dein.vim') 
  call dein#add('autozimu/LanguageClient-neovim', {
      \ 'rev': 'next',
      \ 'build': 'bash install.sh',
      \ })
  call dein#add('Shougo/deoplete.nvim')
  call dein#add('kassio/neoterm')
  call dein#add('lervag/vimtex')
  call dein#add('SirVer/ultisnips')
  call dein#add('tpope/vim-surround')
  call dein#add('scrooloose/nerdtree')
  call dein#add('ctrlpvim/ctrlp.vim')
  call dein#add('jiangmiao/auto-pairs')
  call dein#add('tpope/vim-commentary')
  call dein#add('michaeljsmith/vim-indent-object')
  " markdown stuff
  call dein#add('ferrine/md-img-paste.vim')
  call dein#add('iamcco/markdown-preview.nvim', {'on_ft': ['markdown', 'pandoc.markdown', 'rmd'],
					\ 'build': 'cd app & yarn install' })
  " Appearance plugins
  call dein#add('dylanaraps/wal.vim')
  call dein#add('junegunn/goyo.vim')
  " call dein#add('itchyny/lightline.vim')
  call dein#add('vim-airline/vim-airline')
  " call dein#add('mhartington/oceanic-next')

  call dein#end()
  call dein#save_state()
endif

" basics
filetype plugin indent on
set shiftwidth=2
set expandtab
set smartindent
syntax enable
syntax on
set number "absolute line numbers
" set scrollbind "scroll splits at the same time. For file comparing
" set scb & set noscb  "this are the commands to turn on and off the scrollbinding
set ruler
set incsearch
set nohlsearch
set mouse=a " allows to use the mouse. Useful to resize window splits.
" fast buffer switching listing all possibilities beforehand
nnoremap <Leader>b :ls<Cr>:b<Space>  
" terminal
set shell=bash
tnoremap <C-[> <C-\><C-n>


" markdown create image from clipboard
autocmd FileType markdown nmap <silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
" there are some defaults for image directory and image name, you can change them
" let g:mdip_imgdir = 'img'
" let g:mdip_imgname = 'image'


" Colorscheme / colors
colorscheme wal
" hi StatusLine ctermbg=NONE cterm=NONE  "transparent status line
" let g:lightline = {'colorscheme': 'one'}
" Strange bug with status line color. Need to set it up for pywal override
" it. The next command doesn't apply a red statline, but allows the
" colorscheme to do the right thing..
" hi StatusLine ctermbg=red ctermfg=red
" set background=dark
" termiguicolors doesn't work with pywal theme wal
" set termguicolors

" fold settings
set foldmethod=indent  "fold automatically generated by identation rules
set foldnestmax=10
set nofoldenable "makes sure that when opening, files are "normal", i.e. not folded
set foldlevel=2

" mappings
map <C-n> :NERDTreeToggle<CR>

" vimtext
" let g:vimtex_view_method = 'zathura'
" let g:vimtex_quickfix_mode=0
" let g:vimtex_compiler_latexmk = {
"         \ 'backend' : 'nvim',
"         \ 'background' : 1,
"         \ 'build_dir' : '',
"         \ 'callback' : 1,
"         \ 'continuous' : 1,
"         \ 'executable' : 'latexmk',
"         \ 'options' : [
"         \   '-pdf',
"         \   '-verbose',
"         \   '-file-line-error',
"         \   '-synctex=1',
"         \   '-interaction=nonstopmode',
"         \   '--shell-escape',
"         \ ],
"         \}

" ULtiSnips
let g:UltiSnipsSnippetsDir = "~/.config/nvim/snippets_ulti"
let g:UltiSnipsSnippetDirectories=["snippets_ulti"]
let g:UltiSnipsEditSplit = "vertical"
map gs :UltiSnipsEdit <CR>


" Language Server Protocol (LSP) with LanguageClient-neovim plugin
"
" Required for operations modifying multiple buffers like rename.
set hidden

let g:LanguageClient_serverCommands = {
      \ 'python': ['/home/luis/anaconda3/bin/pyls'],
      \ 'cpp': ['/usr/bin/clangd-7'],
      \ 'c': ['/usr/bin/clangd-7'],
      \ }

" Automatically start language servers.
let g:LanguageClient_autoStart = 1
" Autocompletion Configurations
let g:deoplete#enable_at_startup = 1

nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" Or map each action separately
nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
nnoremap <leader>la :call LanguageClient_workspace_applyEdit()<CR>
nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
nnoremap <leader>lh :call LanguageClient#textDocument_hover()<CR>
nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" One key compilation and execution
" Note: % is the current buffer filename. %:r is the buffer filename without extension 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" autocmd filetype python nnoremap <F5> :w <bar> exec '!python '.shellescape('%')<CR>
" autocmd filetype c nnoremap <F5> :w <bar> exec '!gcc '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>
" autocmd filetype cpp nnoremap <F5> :w <bar> exec '!g++ '.shellescape('%').' -o '.shellescape('%:r').' && ./'.shellescape('%:r')<CR>

""""""""""""
" Neoterm
""""""""""""
" Building
autocmd filetype c nnoremap <F7> :T make<CR>
autocmd filetype c nnoremap <F8> :T make run<CR>
autocmd filetype cpp nnoremap <F7> :T make<CR>
nnoremap <C-L> :Tclear<CR>

" REPL shortcuts
nnoremap <Leader>2 :TREPLSendLine<CR>
vnoremap <Leader>2 :TREPLSendSelection<CR>

" Other
let g:neoterm_autoscroll = '1' "autoscroll terminal output
let g:neoterm_size = 16        "default would take 50% of neovim window


"""""""""""""
" Control P
" Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
"""""""""""""
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
